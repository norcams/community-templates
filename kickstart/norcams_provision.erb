<%#
kind: provision
name: norcams Kickstart default
oses:
- CentOS 4
- CentOS 5
- CentOS 6
- CentOS 7
- Fedora 16
- Fedora 17
- Fedora 18
- Fedora 19
- Fedora 20
%>
<%
  rhel_compatible = @host.operatingsystem.family == 'Redhat' && @host.operatingsystem.name != 'Fedora'
  os_major = @host.operatingsystem.major.to_i
  realm_compatible = (@host.operatingsystem.name == "Fedora" && os_major >= 20) || (rhel_compatible && os_major >= 7)
  # safemode renderer does not support unary negation
  pm_set = @host.puppetmaster.empty? ? false : true
  proxy_string = @host.params['http-proxy'] ? " --proxy=http://#{@host.params['http-proxy']}:#{@host.params['http-proxy-port']}" : ''
  puppet_enabled = pm_set || @host.params['force-puppet']
  salt_enabled = @host.params['salt_master'] ? true : false
  section_end = (rhel_compatible && os_major <= 5) ? '' : '%end'
%>
install
unsupported_hardware
<%= @mediapath %><%= proxy_string %>
lang <%= @host.params['lang'] || 'en_US.UTF-8' %>
selinux --permissive
keyboard us
skipx
network --bootproto <%= @static ? "static --ip=#{@host.ip} --netmask=#{@host.subnet.mask} --gateway=#{@host.subnet.gateway} --nameserver=#{[@host.subnet.dns_primary,@host.subnet.dns_secondary].reject{|n| n.blank?}.join(',')}" : 'dhcp' %> --hostname <%= @host %>
rootpw --iscrypted <%= root_pass %>
firewall --<%= os_major >= 6 ? 'service=' : '' %>ssh
authconfig --useshadow --passalgo=sha256 --kickstart
timezone --utc <%= @host.params['time-zone'] || 'UTC' %>
<% if rhel_compatible && os_major > 4 -%>
services --disabled gpm,sendmail,cups,pcmcia,isdn,rawdevices,hpoj,bluetooth,openibd,avahi-daemon,avahi-dnsconfd,hidd,hplip,pcscd
<% end -%>

<% if realm_compatible && @host.info["parameters"]["realm"] && @host.otp && @host.realm && @host.realm.realm_type == "Active Directory" -%>
realm join --one-time-password='<%= @host.otp %>' <%= @host.realm %>
<% end -%>

<% if @host.operatingsystem.name == 'Fedora' -%>
repo --name=fedora-everything --mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=fedora-<%= @host.operatingsystem.major %>&arch=<%= @host.architecture %><%= proxy_string %>
<% if puppet_enabled && @host.params['enable-puppetlabs-repo'] && @host.params['enable-puppetlabs-repo'] == 'true' -%>
repo --name=puppetlabs-products --baseurl=http://yum.puppetlabs.com/fedora/f<%= @host.operatingsystem.major %>/products/<%= @host.architecture %><%= proxy_string %>
repo --name=puppetlabs-deps --baseurl=http://yum.puppetlabs.com/fedora/f<%= @host.operatingsystem.major %>/dependencies/<%= @host.architecture %><%= proxy_string %>
<% end -%>
<% elsif rhel_compatible && os_major > 4 -%>
repo --name="EPEL" --mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-<%= @host.operatingsystem.major %>&arch=<%= @host.architecture %><%= proxy_string %>
<% if puppet_enabled && @host.params['enable-puppetlabs-repo'] && @host.params['enable-puppetlabs-repo'] == 'true' -%>
repo --name=puppetlabs-products --baseurl=http://yum.puppetlabs.com/el/<%= @host.operatingsystem.major %>/products/<%= @host.architecture %><%= proxy_string %>
repo --name=puppetlabs-deps --baseurl=http://yum.puppetlabs.com/el/<%= @host.operatingsystem.major %>/dependencies/<%= @host.architecture %><%= proxy_string %>
<% end -%>
<% end -%>

<% if @host.operatingsystem.name == 'Fedora' and os_major <= 16 -%>
# Bootloader exception for Fedora 16:
bootloader --append="nofb quiet splash=quiet <%=ks_console%>" <%= grub_pass %>
part biosboot --fstype=biosboot --size=1
<% else -%>
bootloader --location=mbr --append="nofb quiet splash=quiet" <%= grub_pass %>
<% end -%>

<% if @dynamic -%>
%include /tmp/diskpart.cfg
<% else -%>
<%= @host.diskLayout %>
<% end -%>

text
reboot

%packages
yum
dhclient
ntp
wget
@Core
<% if rhel_compatible && os_major > 4 -%>
epel-release
<% end -%>
<% if puppet_enabled %>
puppet
<% if @host.params['enable-puppetlabs-repo'] && @host.params['enable-puppetlabs-repo'] == 'true' -%>
puppetlabs-release
<% end -%>
<% end -%>
<% if salt_enabled %>
salt-minion
<% end -%>
<%= section_end -%>

<% if @dynamic -%>
%pre
<%= @host.diskLayout %>
<%= section_end -%>
<% end -%>

%post --nochroot
exec < /dev/tty3 > /dev/tty3
#changing to VT 3 so that we can see whats going on....
/usr/bin/chvt 3
(
cp -va /etc/resolv.conf /mnt/sysimage/etc/resolv.conf
/usr/bin/chvt 1
) 2>&1 | tee /mnt/sysimage/root/install.postnochroot.log
<%= section_end -%>

%post
logger "Starting anaconda <%= @host %> postinstall"
exec < /dev/tty3 > /dev/tty3
#changing to VT 3 so that we can see whats going on....
/usr/bin/chvt 3
(
#update local time
echo "updating system time"
/usr/sbin/ntpdate -sub <%= @host.params['ntp-server'] || '0.fedora.pool.ntp.org' %>
/usr/sbin/hwclock --systohc

# **** Disable the new naming scheme for network interfaces and enable ethX scheme
# **** when BIOSDEVNAME scheme is not available

# Override udev net-rules on el7
<% if @host.operatingsystem.family == 'Redhat' and @host.operatingsystem.major.to_i >= 7 -%>
mkdir -p /etc/udev/rules.d/60-net.rules
# Add "net.ifnames=0"
/usr/bin/sed -i -e 's/quiet/net.ifnames=0 quiet/' /etc/default/grub
/usr/sbin/grub2-mkconfig -o /boot/grub2/grub.cfg
<% end -%>

# **** Configure additional network interfaces as defined in "enable-addifs" parameter
# **** The last IP byte for these interfaces will be the same as for the primary interface 
# **** Format for this parameter is interfacename1_network/prefix:interfacename2_network/prefix etc
# **** example: eth1_172.16.44.0/24:eth2_192.168.0.0/21

<% if @host.params['enable-addifs'] -%>
configure_addifs=<%=@host.params['enable-addifs'] %>
<% end -%>

if [[ -n "$configure_addifs" ]]; then
IFS=':' read -a ifnetarray <<< "$configure_addifs"

for ifelement in "${ifnetarray[@]}"
    do
        ifdevice=${ifelement%_*}
        ifprefix=$(echo "${ifelement#*/}")
        ifnetwork=$(echo "$ifelement" | cut -f2 -d"_")
        ifhwaddr=$(/sbin/ip link show $ifdevice|grep link|sed -e 's/link\/ether//1'|sed 's/^ *//'|awk '{print $1}')
        iffoo=$(/sbin/ip route|grep default| cut -d" " -f5 | head -n 1)
        ifipbyte=$(/sbin/ip addr show $iffoo|grep "inet "|sed -e 's/inet //1'|sed 's/^ *//'|awk '{print $1}'|cut -f1 -d"/"|cut -f4 -d".")
        ifipaddress="$(echo "$ifnetwork" | cut -f1,2,3 -d ".").$ifipbyte"
        ifnetmask=$(/bin/ipcalc -m $ifipaddress/$ifprefix|sed 's/NETMASK=//')
        echo "DEVICE=\"$ifdevice\"
IPADDR=\"$ifipaddress\"
NETMASK=\"$ifnetmask\"
BOOTPROTO=\"static\"
DEFROUTE=\"no\"
ONBOOT=\"yes\"
HWADDR=\"$ifhwaddr\"" > /etc/sysconfig/network-scripts/ifcfg-$ifdevice
        echo "Added device $ifdevice, HWaddr is $ifhwaddr, network is $ifnetwork, netmask is $ifipbyte. Address for device $ifdevice is $ifipaddress"
    done
    /sbin/ifup $ifdevice
fi

# **** Wipe disk labels on the non-boot disks
<% if @host.params['installdevice'] and !@host.params['keepdevices'] -%>
disks=$(cat /proc/partitions | grep 'sd\|hd' | awk '{print $4}' | grep -v '[0-9]')
for i in $disks; do
  if [ $i != @host.params['installdevice'] ]; then
    /sbin/pvcreate --yes /dev/$i 
    /sbin/pvremove --yes /dev/$i 
  fi
done
<% end -%>

# **** Disable NetworkManager on el7
<% if @host.operatingsystem.family == 'Redhat' and @host.operatingsystem.major.to_i >= 7 -%>
/usr/bin/systemctl disable NetworkManager.service
<% end -%>

<% if @host.info["parameters"]["realm"] && @host.otp && @host.realm && @host.realm.realm_type == "FreeIPA" -%>
<%= snippet "freeipa_register" %>
<% end -%>

# update all the base packages from the updates repository
yum -t -y -e 0 update

<% if puppet_enabled %>
echo "Installing libnetcf-ruby"
yum -y install http://folk.uio.no/beddari/libnetcf-ruby-0.0.2-1.x86_64.rpm
echo "Configuring puppet"
cat > /etc/puppet/puppet.conf << EOF
<%= snippet 'puppet.conf' %>
EOF

# Setup puppet to run on system reboot
#/sbin/chkconfig --level 345 puppet on

FACTER_runmode=bootstrap /usr/bin/puppet agent --verbose --show_diff \
  --certname <%= @host %> \
  --disable_warnings=deprecations \
  --trusted_node_data \
  --no-stringify-facts \
  --onetime \
  --no-daemonize \
  <%= @host.puppetmaster.blank? ? '' : "--server #{@host.puppetmaster}" %>
<% end -%>

<% if salt_enabled %>
cat > /etc/salt/minion << EOF
<%= snippet 'saltstack_minion' %>
EOF
# Setup salt-minion to run on system reboot
/sbin/chkconfig --level 345 salt-minion on
# Running salt-call to trigger key signing
salt-call --no-color --grains >/dev/null
<% end -%>

sync

# Inform the build system that we are done.
echo "Informing Foreman that we are built"
wget -q -O /dev/null --no-check-certificate <%= foreman_url %>
# Sleeping an hour for debug
) 2>&1 | tee /root/install.post.log
exit 0

<%= section_end -%>
